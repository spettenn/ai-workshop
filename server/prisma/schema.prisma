// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  name        String
  department  String?
  password    String   // bcrypt hashed
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  predictions Prediction[]
  comments    Comment[]
  
  @@map("users")
}

model Match {
  id          String   @id @default(cuid())
  apiId       Int?     @unique // API-Football match ID
  homeTeam    String
  awayTeam    String
  kickoffTime DateTime
  status      String   @default("SCHEDULED") // SCHEDULED, LIVE, FINISHED
  homeScore   Int?
  awayScore   Int?
  round       String?  // Group A, Round of 16, etc.
  venue       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  predictions Prediction[]
  comments    Comment[]
  
  @@map("matches")
}

model Prediction {
  id          String   @id @default(cuid())
  userId      String
  matchId     String
  homeGoals   Int
  awayGoals   Int
  points      Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  match       Match    @relation(fields: [matchId], references: [id], onDelete: Cascade)
  
  // Constraints
  @@unique([userId, matchId])
  @@map("predictions")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  userId    String
  matchId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  match     Match    @relation(fields: [matchId], references: [id], onDelete: Cascade)
  
  @@map("comments")
} 